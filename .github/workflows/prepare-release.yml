name: "prepare-release"
on:
  workflow_dispatch:
    inputs:
      openApiUrl:
        description: "url to openApi json"
        type: string
        default: "https://cumulocity.com/api/core/10.18.0/dist/c8y-oas.json"
        required: false
      flags:
        description: "flags"
        type: string
        default: ""
        required: false
  schedule:
    - cron: '30 3 * * *'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:

    - name: "checkout"
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: "configure git"
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: "setup node"
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: "setup jq"
      run: |
        sudo apt install jq -y

    - name: "npm install"
      run: |
        ls -all
        git status
        ls -all
        npm install

    - name: "generate sources"
      run: |
        node pipeline-tool.js build-api ${{ inputs.flags }} ${{ inputs.openApiUrl }}

    - name: "bump version"
      id: "versionBump"
      run: |
        git status
        ls -all
        oldVersion=$(jq .version ./package.json | sed 's/\"//g')
        echo "old:"
        echo "v$oldVersion"
        npm version patch
        newVersion=$(jq .version ./package.json | sed 's/\"//g')
        echo "new:"
        echo "v$newVersion"
        git add package.json package-lock.json src/api/* api-definition
        git status
        git commit -m "Bump version from v$oldVersion to v$newVersion"
        git log --oneline
        git tag "v$newVersion"
        echo "tags:"
        git tag -l
        git push origin v$newVersion
        git push origin main
        cd dist
        zip -r ngx-c8y-openapi-library.zip ngx-c8y-openapi-library/
        echo "tag-name=v$newVersion" >> "$GITHUB_OUTPUT"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versionBump.outputs.tag-name }}
        release_name: Release ${{ steps.versionBump.outputs.tag-name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./dist/ngx-c8y-openapi-library.zip
        asset_name: ngx-c8y-openapi-library.zip
        asset_content_type: application/zip


